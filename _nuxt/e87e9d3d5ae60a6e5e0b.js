(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{158:function(t,e,n){"use strict";var o={props:{colour:{type:String}},data:function(){return{blockquoteClass:"{-background bg-".concat(this.colour,"-100 -} {-border border-l-4 border-").concat(this.colour,"-500 -} {-spacing my-4 p-4 -}")}}},r=n(17),component=Object(r.a)(o,function(){var t=this.$createElement;return(this._self._c||t)("blockquote",{class:this.blockquoteClass},[this._t("default")],2)},[],!1,null,null,null);e.a=component.exports},159:function(t,e,n){"use strict";var o={data:function(){return{preClass:"{-display overflow-x-scroll -} {-typography text-sm -} {-background bg-gray-200 -} {-border border-l-4 rounded-r-lg border-gray-600 -} {-sizing -} {-spacing my-4 p-2 -}"}}},r=n(17),component=Object(r.a)(o,function(){var t=this.$createElement,e=this._self._c||t;return e("pre",{class:this.preClass},[this._v("  "),e("code",[this._t("default")],2),this._v("\n")])},[],!1,null,null,null);e.a=component.exports},160:function(t,e,n){"use strict";var o=n(17),component=Object(o.a)({},function(){var t=this.$createElement;return(this._self._c||t)("section",{staticClass:"{-spacing pb-4 -}"},[this._t("default")],2)},[],!1,null,null,null);e.a=component.exports},161:function(t,e,n){"use strict";var o=n(17),component=Object(o.a)({},function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("h2",{staticClass:"{-typography text-xl -} {-spacing pt-6 pb-2"},[this._t("default")],2),this._v(" "),e("hr",{staticClass:"{-border border-b border-gray-400 -} {-spacing mb-4 -}"})])},[],!1,null,null,null);e.a=component.exports},162:function(t,e,n){"use strict";var o=n(17),component=Object(o.a)({},function(){var t=this.$createElement;return(this._self._c||t)("h1",{staticClass:"{-typography text-3xl -}"},[this._t("default")],2)},[],!1,null,null,null);e.a=component.exports},172:function(t,e,n){t.exports=n.p+"img/533161b.png"},194:function(t,e,n){"use strict";n.r(e);var o=n(162),r=n(161),c=n(160),l=n(159),d=n(158),h={components:{ContentHeading:o.a,ContentSubHeading:r.a,ContentSection:c.a,ContentCode:l.a,ContentNotice:d.a}},v=n(17),component=Object(v.a)(h,function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("div",[o("content-heading",[t._v("The Flow Architecture")]),t._v(" "),o("content-sub-heading",[t._v("Model-View-Update")]),t._v(" "),o("content-section",[t._v("\n    Understanding the Flow architecture is essential for writing excellent applications.\n    At the heart of Flow is a Model-View-Update architecture that focuses on pure\n    functions (functions without side effects) and a unidirectional data flow.\n  ")]),t._v(" "),o("img",{staticClass:"{-spacing mx-auto py-4 -}",attrs:{src:n(172)}}),t._v(" "),o("content-section",[t._v("\n    Data flows in one direction in the MVU architecture. A Model is passed to our\n    Views, the audio and view function. The output of these functions is passed to\n    the runtime to render our HTML and Web Audio elements. The runtime then produces\n    Actions which as passed into the updae function to create a new Model, and so\n    the cycle continues.\n  ")]),t._v(" "),o("content-sub-heading",[t._v("Model")]),t._v(" "),o("content-section",[t._v("\n    In Flow, the Model represents the entire state of an application. It can be \n    as complex or as simple as you need. For a simple counter application the \n    Model could just be a single number:\n  ")]),t._v(" "),o("content-code",[t._v("\n    const Model = 0\n  ")]),t._v(" "),o("content-sub-heading",[t._v("View")]),t._v(" "),o("content-section",[t._v("\n    When talking about Views, we traditionally mean the part of our application \n    that is displayed to the user. Let's look at how we might display our model \n    to the user:\n  ")]),t._v(" "),o("content-code",[t._v('\n    import { DOM } from "@flow/framework"\n    const { div, button, text } = DOM.Element\n    const { className } = DOM.Attribute\n\n    const view = model => {\n      return div([], [\n        button([ className("inc") ], [ text("+") ]),\n        text(model),\n        button([ className("dec") ], [ text("-") ])\n      ])\n    }\n  ')]),t._v(" "),o("content-section",[t._v("\n    The view function takes the current model and returns some HTML. DOM elements \n    are created with function calls like div and button and all have a uniform \n    API. The first argument is an array of attributes like id or className, and \n    the second is an array of child elements.\n  ")]),t._v(" "),o("content-section",[t._v("\n    It's important to note that functions like div and button don't actually \n    create real HTML. Instead, they produce pure data that the runtime can use\n    to construct the real thing when it needs to.\n  ")]),t._v(" "),o("content-sub-heading",[t._v("Audio")]),t._v(" "),o("content-section",[t._v('\n    In Flow, we think the visual display is only half the story. Because both \n    the visual and audio elements of our application are created from the same \n    model, we think it\'s fair to say the audio output is just as much a "view" \n    into the model as the HTML.\n  ')]),t._v(" "),o("content-section",[t._v("\n    Fortunately, the way we create audio nodes in Flow is very similar to the \n    way we create HTML elements. Let's use the model to control the gain of an \n    oscillator:\n  ")]),t._v(" "),o("content-code",[t._v("\n    import { Audio } from '@flow/framework'\n    const { oscillator, gain, dac } = Audio.Node\n    const { gain: gainAmount } = Audio.Property\n\n    const audio = model => {\n      return oscillator([], [\n        gain([ gainAmount(model / 10) ], [\n          dac()\n        ])\n      ])\n    }\n  ")]),t._v(" "),o("content-section",[t._v("\n    As with our HTML functions, these audio nodes are virtual representations \n    of the real thing.\n  ")]),t._v(" "),o("content-sub-heading",[t._v("Update")]),t._v(" "),o("content-section",[t._v("\n    There is only one way to change the Model in a Flow application, and that \n    is through the aptly named update function. To update the Model in a \n    controlled and predictable manner, we tend to switch over actions: strings \n    that describe what to update.\n  ")]),t._v(" "),o("content-section",[t._v('\n    For our simple counter example, we might have two actions to "Increment" \n    and "Decrement" the counter:\n  ')]),t._v(" "),o("content-code",[t._v('\n    const update ({ action }, model) => {\n      switch (action) {\n        case "Increment":\n          return [model + 1]\n\n        case "Decrement":\n          return [model - 1]\n      }\n    }\n  ')]),t._v(" "),o("div",{staticClass:"{-typography text-right text-indigo-500 hover:text-indigo-800 -} {-spacing my-4 -}"},[o("nuxt-link",{attrs:{to:"/examples/00-polysynth"}},[t._v("00-polysynth")]),t._v(" Â»\n  ")],1)],1)},[],!1,null,null,null);e.default=component.exports}}]);